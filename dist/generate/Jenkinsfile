def yellow = '#e79713'
def red = '#d54c53'
def green = '#8cc04f'
def blue = '#4a90e2'

podTemplate(
    containers: [
        containerTemplate(name: 'gradle', image: 'gradle:6.8-jdk11', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:latest', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: '719012679654.dkr.ecr.eu-central-1.amazonaws.com/jenkins-kubectl:1', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'liquibase', image: '719012679654.dkr.ecr.eu-central-1.amazonaws.com/jenkins-liquibase:1', ttyEnabled: true, command: 'cat')],
    volumes: [
        persistentVolumeClaim(claimName: 'jenkins-pv', mountPath: '/root/.m2'),
        secretVolume(secretName: 'aws-registry', mountPath: '/root/.docker/raw'),
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]
  ) {

    node(POD_LABEL) {
        try {
            environment {
                ENV = 'dev'
            }

            stage('Git pull') {
                startJob()
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/Atomanti007/cacheman-downloader.git'
            }

            container('gradle') {
                stage('Gradle clean') {
                    sh 'gradle clean clean'
                }
                stage('Gradle build') {
                    sh 'gradle build'
                }
                stage('Publish to maven local') {
                    sh 'gradle publishToMavenLocal'
                }
            }

            container('docker') {
                stage('Build docker image') {

                    sh 'cp ./modules/rest-docker/Dockerfile ./modules/rest-docker/build'
                    sh 'cp -R modules/rest-docker/build/libs modules/rest-docker/build/docker'
                    dir('./modules/rest-docker/build') {
                        sh 'docker build -t cacheman-downloader:1 .'
                    }
                }
            }

            container('liquibase') {
                stage('DB deploy') {
                    dir('./liquibase') {
                        sh 'liquibase --defaultsFile="properties/dev/liquibase-kubernetes.properties" update'
                    }
                }
            }

            container('docker') {
                stage('Docker images push AWS') {
                    sh 'cp /root/.docker/raw/.dockerconfigjson /root/.docker/config.json'
                    sh 'docker push 719012679654.dkr.ecr.eu-central-1.amazonaws.com/cacheman-downloader:1.0.0-SNAPSHOT'
                }
            }

            container('kubectl') {
                stage('Deploy kubernetes') {
                    dir('./kubernetes') {

                        sh 'export ENV="dev"'
                        sh 'kubectl apply -f deployment.yaml'
                        sh 'kubectl apply -f service.yaml'
    //                     sh 'kubectl apply -f prometheus.yaml'
                        sh 'kubectl rollout restart deployment cacheman-downloader -n storesync'
                        sh 'kubectl rollout status deployment cacheman-downloader -n storesync -w'
                    }
                }
            }
        } catch (e) {
            failedJob()
            throw e
        }
        successJob()
    }
}

def startJob() {
    def message = "Start ${env.JOB_NAME} [${env.BUILD_NUMBER}]"
    slackSend (color: '#4a90e2', message: message)
}

def successJob() {
    def message = "SUCCESS ${env.JOB_NAME} [${env.BUILD_NUMBER}]\n${env.BUILD_URL}"
    slackSend (color: '#8cc04f', message: message)
}

def failedJob() {
    def message = "FAILED ${env.JOB_NAME} [${env.BUILD_NUMBER}]\n${env.BUILD_URL}"
    slackSend (color: '#d54c53', message: message)
}
